(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{44:function(e,t,n){"use strict";n.r(t);var r=n(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("pre",[n("code",[e._v("对于框架dachang都有自己的框架库/都是要重新学习  \n所以更多是让你有能力去开发框架、而不是找去使用之前造好的框架\n明白这个、就知道为什么大厂注重基础 \n")])]),n("h4",{attrs:{id:"4-ie-浏览器-和其他浏览器不一样的-特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#4-ie-浏览器-和其他浏览器不一样的-特性","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. ie 浏览器 和其他浏览器不一样的 特性")]),n("pre",[n("code",[e._v("1）IE支持currentStyle，Firefox使用getComputStyle;\n2）IE使用innerText，FireFox使用textContent；\n3）滤镜方面：IE：filter:alpha(opacity= num)；Firefox：-moz-opacity:num；\n4）事件方面：IE：attachEvent：火狐是addEventListener；\n5）鼠标位置：IE是event.clientX；火狐是event.pageX；\n6）IE使用event.srcElement；Firefox使用event.target；\n7）IE中消除list的原点仅需margin:0即可达到最终效果；FIrefox需要设置margin:0;padding:0以及list-style:none；\n")])]),n("h4",{attrs:{id:"5-ie-和-chrome-可以并行下载多少个资源？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#5-ie-和-chrome-可以并行下载多少个资源？","aria-hidden":"true"}},[e._v("#")]),e._v(" 5.IE 和 Chrome 可以并行下载多少个资源？")]),n("pre",[n("code",[e._v("IE6：2个；\nIE7：4个；\nIE8+：6个\nFireFox，Chrome：6个。\n补充：同一时间针对同一域名下的请求有一定数量限制，超过限制数目的请求会被阻塞。大多数浏览器的并发数量都控制在6以内。有些资源的请求时间很长，因而会阻塞其他资源的请求。因此，对于一些静态资源，如果放到不同的域名下面就能实现与其他资源的并发请求。\n")])]),n("h4",{attrs:{id:"6-defer-和-async-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#6-defer-和-async-区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 6. defer 和 async 区别")]),n("pre",[n("code",[e._v("1. defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）\n2. 它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n3. 关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用\n4. async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行\n5. 仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics\n")])]),n("h4",{attrs:{id:"7-原型-继承的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#7-原型-继承的理解","aria-hidden":"true"}},[e._v("#")]),e._v(" 7. 原型 继承的理解")])])}],!1,null,null,null);t.default=a.exports}}]);